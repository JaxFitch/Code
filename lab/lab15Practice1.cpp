/*
This program will contain the following functions:
1. Initialize and array with random numbers
2. Display elements of array
3. Insert an element into the second index without disturbing the order  of the rest of the elements
4. Find the index of the first occurence of a given number
5. Remove the first occurence of a given number from array
*/

#include<iostream>
#include<cstdlib>

using namespace std;

void initArr(int arr[], int size) {
    for(int i = 0; i < size; i++) {
        arr[i] = rand() % 151;
    }
}

void displayArr(int arr[], int size) {
    for(int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void insertSecond(int arr[], int size, int newValue) {
    for(int i = size - 1; i > 0; i--) {
        arr[i] = arr[i - 1];
    }
    arr[1] = newValue;
}

int findIndex(int arr[], int size, int value) {
    for(int i = 0; i < size; i++) {
        if(arr[i] == value) {
            return i;
        }
    }
    return -1;
}

void removeValue(int arr[], int size, int value) {
    int index = findIndex(arr, size, value);
    if(index != -1) {
        for(int i = index; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }
    }
}

int main() {
    srand(time(NULL));
    int arr[100];
    const int SIZE = 100;

    initArr(arr, SIZE);
    displayArr(arr, SIZE);
    
    insertSecond(arr, SIZE, 80);
    displayArr(arr, SIZE);

    removeValue(arr, SIZE, 80);
    displayArr(arr, SIZE);

    return 0;
}

/*
Test examples:

Trial 1:
134 98 27 52 94 132 6 103 112 12 91 75 5 146 5 71 80 87 70 120 108 91 56 126 117 51 118 82 50 145 27 105 35 90 115 11 15 119 127 44 85 21 45 114 78 74 110 138 103 101 85 52 22 60 104 140 25 56 114 136 102 110 16 78 67 124 30 139 12 78 99 77 64 96 90 21 11 129 51 114 4 41 99 24 118 89 126 24 91 121 103 56 102 94 82 79 64 56 23 11 
134 80 98 27 52 94 132 6 103 112 12 91 75 5 146 5 71 80 87 70 120 108 91 56 126 117 51 118 82 50 145 27 105 35 90 115 11 15 119 127 44 85 21 45 114 78 74 110 138 103 101 85 52 22 60 104 140 25 56 114 136 102 110 16 78 67 124 30 139 12 78 99 77 64 96 90 21 11 129 51 114 4 41 99 24 118 89 126 24 91 121 103 56 102 94 82 79 64 56 23 
134 98 27 52 94 132 6 103 112 12 91 75 5 146 5 71 80 87 70 120 108 91 56 126 117 51 118 82 50 145 27 105 35 90 115 11 15 119 127 44 85 21 45 114 78 74 110 138 103 101 85 52 22 60 104 140 25 56 114 136 102 110 16 78 67 124 30 139 12 78 99 77 64 96 90 21 11 129 51 114 4 41 99 24 118 89 126 24 91 121 103 56 102 94 82 79 64 56 23 23

Trial 2:
50 5 30 60 117 117 14 60 145 99 126 85 111 148 99 37 98 105 58 127 124 139 4 37 12 94 93 79 30 67 105 43 65 90 44 96 119 103 3 67 52 124 133 11 111 92 3 150 141 108 127 106 117 52 67 58 28 23 139 132 14 150 51 94 39 11 32 98 66 90 69 43 144 105 119 43 121 61 17 23 116 101 88 55 22 111 18 146 72 133 136 141 56 75 92 68 148 9 26 25 
50 80 5 30 60 117 117 14 60 145 99 126 85 111 148 99 37 98 105 58 127 124 139 4 37 12 94 93 79 30 67 105 43 65 90 44 96 119 103 3 67 52 124 133 11 111 92 3 150 141 108 127 106 117 52 67 58 28 23 139 132 14 150 51 94 39 11 32 98 66 90 69 43 144 105 119 43 121 61 17 23 116 101 88 55 22 111 18 146 72 133 136 141 56 75 92 68 148 9 26 
50 5 30 60 117 117 14 60 145 99 126 85 111 148 99 37 98 105 58 127 124 139 4 37 12 94 93 79 30 67 105 43 65 90 44 96 119 103 3 67 52 124 133 11 111 92 3 150 141 108 127 106 117 52 67 58 28 23 139 132 14 150 51 94 39 11 32 98 66 90 69 43 144 105 119 43 121 61 17 23 116 101 88 55 22 111 18 146 72 133 136 141 56 75 92 68 148 9 26 26 

Trial 3:
64 42 86 147 49 63 112 126 122 112 85 121 72 71 82 55 2 102 50 49 85 64 48 29 134 48 145 38 148 12 44 110 103 114 37 74 35 111 74 3 1 133 25 109 64 137 81 50 77 146 101 10 120 72 14 92 15 31 87 81 6 30 108 108 69 144 126 52 8 136 137 64 98 105 51 53 104 46 54 119 51 37 140 133 92 66 143 107 50 59 74 68 55 141 25 124 149 71 144 62 
64 80 42 86 147 49 63 112 126 122 112 85 121 72 71 82 55 2 102 50 49 85 64 48 29 134 48 145 38 148 12 44 110 103 114 37 74 35 111 74 3 1 133 25 109 64 137 81 50 77 146 101 10 120 72 14 92 15 31 87 81 6 30 108 108 69 144 126 52 8 136 137 64 98 105 51 53 104 46 54 119 51 37 140 133 92 66 143 107 50 59 74 68 55 141 25 124 149 71 144 
64 42 86 147 49 63 112 126 122 112 85 121 72 71 82 55 2 102 50 49 85 64 48 29 134 48 145 38 148 12 44 110 103 114 37 74 35 111 74 3 1 133 25 109 64 137 81 50 77 146 101 10 120 72 14 92 15 31 87 81 6 30 108 108 69 144 126 52 8 136 137 64 98 105 51 53 104 46 54 119 51 37 140 133 92 66 143 107 50 59 74 68 55 141 25 124 149 71 144 144 
*/